@page
@model KTU_forum.Pages.MessHallModel
@{

    var roomName = Model.RoomName;
    var username = Model.Username;
    var profilePic = Model.ProfilePicturePath;
}
<div class="container-fluid vh-100 d-flex flex-column">
    <div class="card shadow border-0 rounded-4 mb-0 flex-fill">
        <div class="card-body p-4 d-flex flex-column">
            <!-- Chat Messages Area -->
            <div class="messages-container flex-fill overflow-auto" style="max-height: calc(100vh - 150px);">
                <ul id="messagesList" class="list-unstyled">
                    @foreach (var message in Model.Messages)
                    {
                        var formattedTime = message.SentAt.ToString("yyyy-MM-dd | HH:mm");
                        <li class="d-flex align-items-start mb-3 message-item position-relative">
                            <img src="@message.SenderProfilePic" alt="@message.SenderUsername's profile picture" class="rounded-circle"
                                 style="width: 40px; height: 40px; object-fit: cover; margin-right: 10px;">
                            <div>
                                <small class="text-muted">@message.SenderUsername • @formattedTime</small>
                                <p class="mb-1">@message.Content</p>
                            </div>

                            <div class="message-menu position-absolute top-0 end-0 me-2 mt-2 d-none">
                                <button class="btn btn-sm btn-outline-primary me-1 like-btn">👍 Like</button>
                                <button class="btn btn-sm btn-outline-secondary reply-btn">↩️ Reply</button>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            <!-- Message Input Area -->
            <div class="message-input-area mt-3">
                <div class="d-flex">
                    <input type="text" id="messageInput" class="form-control me-2" placeholder="Enter your message" />
                    <button id="sendButton" class="btn btn-primary">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- SignalR JS Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.10/signalr.min.js"></script>
<script>
    var username = '@username';
    var profilePicPath = '@profilePic';
    var roomName = '@roomName';

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.start()
    .then(function () {
        connection.invoke("JoinRoom", roomName);
    })
    .catch(function (err) {
        return console.error(err.toString());
    });

    connection.on("ReceiveMessage", function (user, message, profilePic) {
        const messagesList = document.getElementById("messagesList");
        const messageItem = document.createElement("li");
        messageItem.classList.add("d-flex", "align-items-start", "mb-3");

        const messageMenu = document.createElement("div");
        messageMenu.classList.add("message-menu", "position-absolute", "top-0", "end-0", "me-2", "mt-2", "d-none");

        const likeButton = document.createElement("button");
        likeButton.classList.add("btn", "btn-sm", "btn-outline-primary", "me-1", "like-btn");
        likeButton.textContent = "👍 Like";

        const replyButton = document.createElement("button");
        replyButton.classList.add("btn", "btn-sm", "btn-outline-secondary", "reply-btn");
        replyButton.textContent = "↩️ Reply";

        const img = document.createElement("img");
        img.src = profilePic || '/pfps/default.png'; // fallback
        img.alt = user + "'s profile picture";
        img.classList.add("rounded-circle");
        img.style.width = "40px";
        img.style.height = "40px";
        img.style.objectFit = "cover";
        img.style.marginRight = "10px";

        const messageContent = document.createElement("div");
        const meta = document.createElement("small");
        meta.classList.add("text-muted");

        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const day = currentDate.getDate().toString().padStart(2, '0');
        const hours = currentDate.getHours().toString().padStart(2, '0');
        const minutes = currentDate.getMinutes().toString().padStart(2, '0');
        const formattedDate = `${year}-${month}-${day} | ${hours}:${minutes}`;

        meta.textContent = `${user} • ${formattedDate}`;

        const messageText = document.createElement("p");
        messageText.classList.add("mb-1");
        messageText.textContent = message;

        messageMenu.appendChild(likeButton);
        messageMenu.appendChild(replyButton);

        messageContent.appendChild(meta);
        messageContent.appendChild(messageText);
        messageItem.appendChild(img);
        messageItem.appendChild(messageContent);
        messagesList.appendChild(messageItem);

        messagesList.scrollTop = messagesList.scrollHeight;

        messageItem.classList.add("position-relative", "message-item");
        messageItem.appendChild(messageMenu);

        // Add the click event to the like button
        likeButton.addEventListener("click", function () {
            const messageId = likeButton.dataset.messageId; // Get the message ID from the button's data attribute
            connection.invoke("LikeMessage", messageId, username)
                .catch(err => console.error(err.toString()));
        });
    });

    document.getElementById("sendButton").addEventListener("click", function () {
        sendMessage();
    });

    document.getElementById("messageInput").addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            sendMessage();
        }
    });

        // Handle hover to show/hide the message menu
    document.addEventListener("mouseover", function (event) {
        if (event.target.closest(".message-item")) {
            const menu = event.target.closest(".message-item").querySelector(".message-menu");
            if (menu) {
                menu.classList.remove("d-none");
            }
        }
    });

    document.addEventListener("mouseout", function (event) {
        if (event.target.closest(".message-item")) {
            const menu = event.target.closest(".message-item").querySelector(".message-menu");
            if (menu) {
                menu.classList.add("d-none");
            }
        }
    });


    function sendMessage() {
        const message = document.getElementById("messageInput").value;
        if (!username) {
            alert("Please log in.");
            return;
        }
        if (!message.trim()) {
            alert("Please input a message.");
            return;
        }

        connection.invoke("SendMessage", username, roomName, message)
            .catch(err => console.error(err.toString()));

        document.getElementById("messageInput").value = "";
    }

    // Scroll to bottom when page loads
    window.onload = function() {
        const messagesList = document.getElementById("messagesList");
        messagesList.scrollTop = messagesList.scrollHeight;
    }
</script>