@page
@model KTU_forum.Pages.MessHallModel
@{
    var roomName = Model.RoomName;
    var username = Model.Username;
    var profilePic = Model.ProfilePicturePath;
    var userRole = Model.UserRole;
}
<div class="container-fluid vh-100 d-flex flex-column">
    <div class="card shadow border-0 rounded-4 mb-0 flex-fill">
        <div class="card-body p-4 d-flex flex-column">

            <div class="search-container mb-2">
                <div class="input-group">
                    <span class="input-group-text bg-light">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" id="messageSearch" class="form-control" placeholder="Search messages..." />
                    <button id="clearSearchBtn" class="btn btn-outline-secondary d-none">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div id="searchResultsDropdown" class="search-results-dropdown d-none">
                    <div class="search-results-header px-3 py-2 border-bottom d-flex justify-content-between align-items-center">
                        <span>Search Results (<span id="matchCount">0</span>)</span>
                        <button id="closeSearchResultsBtn" class="btn btn-sm text-muted p-0">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div id="searchResultsList" class="search-results-list"></div>
                </div>
            </div>

            <div class="messages-container flex-fill overflow-auto" style="max-height: calc(100vh - 150px);">
                <ul id="messagesList" class="list-unstyled">
                    @foreach (var message in Model.Messages)
                    {
                        var formattedTime = message.SentAt.ToString("yyyy-MM-dd | HH:mm");
                        <li class="d-flex align-items-start mb-3 message-item position-relative" id="message-@message.MessageId">
                            <img src="@(string.IsNullOrWhiteSpace(message.SenderProfilePic) ? "/profile-pictures/default.png" : message.SenderProfilePic)"
                                 class="rounded-circle profile-pic me-2"
                                 style="width: 40px; height: 40px; object-fit: cover;" />
                            <div style="width: 100%;">
                                @if (message.IsReply)
                                {
                                    <div class="reply-info mb-1 border-start border-2 ps-2" style="border-color: #e0e0e0 !important; font-size: 0.85rem; background-color: #f8f9fa; border-radius: 0.25rem; padding: 0.25rem;">
                                        <div class="reply-sender fw-bold text-muted">
                                            <i class="bi bi-reply"></i> Replying to @message.ReplyToUsername
                                        </div>
                                        <div class="reply-content text-muted text-truncate" style="max-width: 90%;">
                                            @message.ReplyToContent
                                        </div>
                                    </div>
                                }
                                <small class="text-muted">
                                    @message.SenderUsername
                                    @if (!string.IsNullOrEmpty(message.SenderRole))
                                    {
                                        <span class="badge bg-success text-white ms-1" style="opacity: 0.4; font-size: 0.75rem;">@message.SenderRole</span>
                                    }
                                    • @formattedTime
                                </small>
                                @if (!string.IsNullOrEmpty(message.Content))
                                {
                                    <p class="mb-1">@message.Content</p>
                                }
                                @if (!string.IsNullOrEmpty(message.ImagePath))
                                {
                                    <img src="@message.ImagePath" class="img-fluid mb-1" style="max-width: 200px;" />
                                }
                                @if (message.IsEdited)
                                {
                                    <small class="text-muted edited-indicator">(edited)</small>
                                }
                                <div class="d-flex align-items-center">
                                    <span class="likes-count badge bg-light text-dark me-2" id="likes-@message.MessageId">
                                        @if (message.LikesCount > 0)
                                        {
                                            <i class="bi bi-hand-thumbs-up-fill"></i> @message.LikesCount
                                        }
                                    </span>
                                </div>
                            </div>
                            <div class="message-actions position-absolute top-0 end-0 me-2 mt-2">
                                <button class="btn btn-sm btn-light message-options-btn">...</button>
                                <div class="message-menu d-none bg-light border rounded shadow-sm p-2">
                                    <div class="d-flex flex-wrap gap-1">
                                        <button class="btn btn-sm btn-outline-primary me-1 like-btn"
                                                data-message-id="@message.MessageId"
                                                data-has-liked="@message.hasLiked.ToString().ToLower()">
                                            @if (message.hasLiked)
                                            {
                                                <text>👎 Unlike</text>
                                            }
                                            else
                                            {
                                                <text>👍 Like</text>
                                            }
                                        </button>
                                        <button class="btn btn-sm btn-outline-primary reply-btn"
                                                data-message-id="@message.MessageId"
                                                data-sender="@message.SenderUsername"
                                                data-content="@message.Content">
                                            ↩️ Reply
                                        </button>
                                        @if (message.SenderUsername == Model.Username)
                                        {
                                            <button class="btn btn-sm btn-outline-primary edit-btn"
                                                    data-message-id="@message.MessageId"
                                                    data-content="@message.Content">
                                                ✏️ Edit
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger delete-btn"
                                                    data-message-id="@message.MessageId">
                                                🗑️ Delete
                                            </button>
                                        }
                                        <a href="/PublicProfile/@message.SenderUsername" class="btn btn-sm btn-outline-primary view-profile-btn">
                                            👤 Profile
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>

            <div class="message-input-area mt-3">
                <div id="replyContainer" class="reply-container bg-light p-2 mb-2 rounded d-none">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="fw-bold"><i class="bi bi-reply"></i> Replying to <span id="replyToUsername"></span></span>
                            <p class="mb-0 text-muted small text-truncate" id="replyToContent"></p>
                        </div>
                        <button id="cancelReplyBtn" class="btn btn-sm text-muted" title="Cancel reply">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </div>

                <div class="d-flex align-items-center">
                    <label id="imageLabel" class="btn btn-secondary me-2 mb-0">
                        <i class="bi bi-image"></i> Select Image
                        <input type="file" id="imageInput" accept="image/*" hidden />
                    </label>
                    <input type="text" id="messageInput" class="form-control me-2" placeholder="Enter your message" />
                    <button id="sendButton" class="btn btn-primary">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.10/signalr.min.js"></script>
<script>
    const USERNAME = '@username';
    const PROFILE_PIC = '@profilePic';
    const ROOM_NAME = '@roomName';
    const USER_ROLE = '@userRole';
    let isReplying = false;
    let replyToId = null;

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.start()
        .then(() => {
            connection.invoke("JoinRoom", ROOM_NAME);
            console.log("Connected to SignalR hub!");
        })
        .catch(err => console.error("SignalR Connection Error:", err.toString()));

    connection.on("ReceiveMessage", (user, message, profilePic, role, messageId, imagePath) => {
        const messagesList = document.getElementById("messagesList");
        const messageItem = document.createElement("li");
        messageItem.classList.add("d-flex", "align-items-start", "mb-3", "message-item", "position-relative");
        messageItem.id = `message-${messageId}`;

        const img = document.createElement("img");
        img.src = profilePic && profilePic.trim() ? profilePic : "/profile-pictures/default.png";
        img.classList.add("rounded-circle", "profile-pic");
        Object.assign(img.style, {
            width: "40px",
            height: "40px",
            objectFit: "cover",
            marginRight: "10px"
        });

        const contentContainer = document.createElement("div");
        contentContainer.style.width = "100%";

        const meta = document.createElement("small");
        meta.classList.add("text-muted");
        meta.textContent = user;
        if (role) {
            const roleBadge = document.createElement("span");
            roleBadge.classList.add("badge", "bg-success", "text-white", "ms-1");
            roleBadge.style.opacity = "0.4";
            roleBadge.style.fontSize = "0.75rem";
            roleBadge.textContent = role;
            meta.appendChild(roleBadge);
        }
        meta.appendChild(document.createTextNode(` • ${formatTimestamp(new Date())}`));
        contentContainer.appendChild(meta);

        if (message && message.trim()) {
            const messageText = document.createElement("p");
            messageText.classList.add("mb-1");
            messageText.textContent = message;
            contentContainer.appendChild(messageText);
        }

        if (imagePath) {
            const imgElement = document.createElement("img");
            imgElement.src = imagePath;
            imgElement.classList.add("img-fluid", "mb-1");
            imgElement.style.maxWidth = "200px";
            contentContainer.appendChild(imgElement);
        }

        const likesContainer = document.createElement("div");
        likesContainer.classList.add("d-flex", "align-items-center");
        const likesCount = document.createElement("span");
        likesCount.classList.add("likes-count", "badge", "bg-light", "text-dark", "me-2");
        likesCount.id = `likes-${messageId}`;
        likesContainer.appendChild(likesCount);
        contentContainer.appendChild(likesContainer);

        const messageActions = createMessageActions(user, messageId, message);
        messageItem.appendChild(img);
        messageItem.appendChild(contentContainer);
        messageItem.appendChild(messageActions);
        messagesList.appendChild(messageItem);

        scrollToBottom();
    });

    connection.on("ReceiveReply", (user, message, profilePic, role, messageId, replyToId, originalSender, originalContent) => {
        const messagesList = document.getElementById("messagesList");
        const messageItem = document.createElement("li");
        messageItem.classList.add("d-flex", "align-items-start", "mb-3", "message-item", "position-relative");
        messageItem.id = `message-${messageId}`;

        const img = document.createElement("img");
        img.src = profilePic && profilePic.trim() ? profilePic : "/profile-pictures/default.png";
        img.classList.add("rounded-circle", "profile-pic");
        Object.assign(img.style, {
            width: "40px",
            height: "40px",
            objectFit: "cover",
            marginRight: "10px"
        });

        const contentContainer = document.createElement("div");
        contentContainer.style.width = "100%";

        const replyInfo = document.createElement("div");
        replyInfo.classList.add("reply-info", "mb-1", "border-start", "border-2", "ps-2");
        Object.assign(replyInfo.style, {
            borderColor: "#e0e0e0 !important",
            fontSize: "0.85rem",
            backgroundColor: "#f8f9fa",
            borderRadius: "0.25rem",
            padding: "0.25rem"
        });
        const replySender = document.createElement("div");
        replySender.classList.add("reply-sender", "fw-bold", "text-muted");
        replySender.innerHTML = `<i class="bi bi-reply"></i> Replying to ${originalSender}`;
        const replyContent = document.createElement("div");
        replyContent.classList.add("reply-content", "text-muted", "text-truncate");
        replyContent.style.maxWidth = "90%";
        replyContent.textContent = originalContent;
        replyInfo.appendChild(replySender);
        replyInfo.appendChild(replyContent);
        contentContainer.appendChild(replyInfo);

        const meta = document.createElement("small");
        meta.classList.add("text-muted");
        meta.textContent = user;
        if (role) {
            const roleBadge = document.createElement("span");
            roleBadge.classList.add("badge", "bg-success", "text-white", "ms-1");
            roleBadge.style.opacity = "0.4";
            roleBadge.style.fontSize = "0.75rem";
            roleBadge.textContent = role;
            meta.appendChild(roleBadge);
        }
        meta.appendChild(document.createTextNode(` • ${formatTimestamp(new Date())}`));
        contentContainer.appendChild(meta);

        const messageText = document.createElement("p");
        messageText.classList.add("mb-1");
        messageText.textContent = message;
        contentContainer.appendChild(messageText);

        const likesContainer = document.createElement("div");
        likesContainer.classList.add("d-flex", "align-items-center");
        const likesCount = document.createElement("span");
        likesCount.classList.add("likes-count", "badge", "bg-light", "text-dark", "me-2");
        likesCount.id = `likes-${messageId}`;
        likesContainer.appendChild(likesCount);
        contentContainer.appendChild(likesContainer);

        const messageActions = createMessageActions(user, messageId, message);
        messageItem.appendChild(img);
        messageItem.appendChild(contentContainer);
        messageItem.appendChild(messageActions);
        messagesList.appendChild(messageItem);

        scrollToBottom();
    });

    connection.on("UpdateLikeStatus", (messageId, hasLiked, likeCount) => {
        updateLikeButtonState(messageId, hasLiked);
        updateLikesDisplay(messageId, likeCount);
    });

    connection.on("MessageEdited", (messageId, newContent) => {
        const messageElement = document.getElementById(`message-${messageId}`);
        if (messageElement) {
            const contentElement = messageElement.querySelector("p.mb-1");
            if (contentElement) {
                contentElement.textContent = newContent;
                addEditedIndicator(contentElement);
                updateEditButtonContent(messageElement, newContent);
            }
        }
    });

    connection.on("MessageDeleted", (messageId) => {
        const messageElement = document.getElementById(`message-${messageId}`);
        if (messageElement) {
            messageElement.style.opacity = "0";
            setTimeout(() => messageElement.remove(), 500);
        }
    });

    connection.on("ErrorMessage", (errorMessage) => {
        alert(errorMessage);
    });

    document.addEventListener("DOMContentLoaded", () => {
        setupSearchFunctionality();
        setupImageUpload();
        scrollToBottom();
    });

    document.addEventListener("click", (event) => {
        const target = event.target.closest(".message-options-btn, .like-btn, .edit-btn, .delete-btn, .reply-btn, #cancelEditBtn, #saveEditBtn");
        if (!target) {
            closeAllMenus();
            return;
        }

        const menu = target.closest(".message-menu");
        if (menu) menu.classList.add("d-none");

        if (target.classList.contains("message-options-btn")) {
            closeAllMenus();
            const messageActions = target.closest(".message-actions");
            messageActions.querySelector(".message-menu").classList.toggle("d-none");
        } else if (target.classList.contains("like-btn")) {
            handleLikeButtonClick(target);
        } else if (target.classList.contains("edit-btn")) {
            showEditInterface(target.dataset.messageId, target.dataset.content);
        } else if (target.classList.contains("delete-btn")) {
            if (confirm("Are you sure you want to delete this message?")) {
                connection.invoke("DeleteMessage", parseInt(target.dataset.messageId), USERNAME)
                    .catch(err => console.error("Error deleting message:", err.toString()));
            }
        } else if (target.classList.contains("reply-btn")) {
            setupReply(target.dataset.messageId, target.dataset.sender, target.dataset.content);
        } else if (target.id === "cancelEditBtn") {
            cancelEdit(target.dataset.messageId);
        } else if (target.id === "saveEditBtn") {
            saveEdit(target.dataset.messageId);
        }
    });

    document.getElementById("sendButton").addEventListener("click", sendMessage);
    document.getElementById("messageInput").addEventListener("keypress", (event) => {
        if (event.key === "Enter") sendMessage();
    });
    document.getElementById("cancelReplyBtn").addEventListener("click", cancelReply);

    function setupImageUpload() {
        const imageInput = document.getElementById("imageInput");
        const imageLabel = document.getElementById("imageLabel");

        imageInput.addEventListener("change", function () {
            const file = this.files[0];
            if (!file) {
                imageLabel.classList.remove("btn-primary");
                imageLabel.classList.add("btn-secondary");
                return;
            }

            if (!file.type.startsWith('image/')) {
                alert("Please select an image file.");
                this.value = "";
                return;
            }
            if (file.size > 5 * 1024 * 1024) {
                alert("Image file is too large. Maximum size is 5MB.");
                this.value = "";
                return;
            }

            imageLabel.classList.add("btn-primary");
            imageLabel.classList.remove("btn-secondary");
        });
    }

        function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const imageInput = document.getElementById("imageInput");
        const message = messageInput.value.trim();
        const file = imageInput.files[0];
        const imageLabel = document.getElementById("imageLabel");

        if (!USERNAME) {
            alert("Please log in.");
            return;
        }

        if (!message && !file) {
            alert("Please provide a message or an image.");
            return;
        }

        if (file) {
            // Use the new uploadImageWithMessage function
            uploadImageWithMessage(file, message)
                .then(() => {
                    // Optional: Additional actions after successful upload
                    console.log("Image and/or message uploaded successfully");
                })
                .catch(error => {
                    console.error("Upload failed:", error);
                });
        } else {
            // Existing SignalR message send logic for text-only messages
            const invokeMethod = isReplying && replyToId ? "SendReply" : "SendMessage";
            const invokeArgs = isReplying && replyToId
                ? [USERNAME, ROOM_NAME, message, parseInt(replyToId), USER_ROLE]
                : [USERNAME, ROOM_NAME, message, USER_ROLE];

            connection.invoke(invokeMethod, ...invokeArgs)
                .then(() => {
                    messageInput.value = "";
                    cancelReply();
                })
                .catch(err => {
                    console.error(`Error sending ${isReplying ? "reply" : "message"}:`, err.toString());
                    alert("Failed to send message.");
                });
        }
    }

    function scrollToBottom() {
        const messagesContainer = document.querySelector(".messages-container");
        if (messagesContainer) {
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 100);
        }
    }

    function closeAllMenus() {
        document.querySelectorAll(".message-menu:not(.d-none)").forEach(menu => menu.classList.add("d-none"));
    }

    function updateLikesDisplay(messageId, likeCount) {
        const likesCountElement = document.getElementById(`likes-${messageId}`);
        if (likesCountElement) {
            likesCountElement.innerHTML = likeCount > 0
                ? `<i class="bi bi-hand-thumbs-up-fill"></i> ${likeCount}`
                : '';
        }
    }

    function updateLikeButtonState(messageId, hasLiked) {
        document.querySelectorAll(`.like-btn[data-message-id="${messageId}"]`).forEach(btn => {
            btn.dataset.hasLiked = hasLiked.toString();
            btn.textContent = hasLiked ? "👎 Unlike" : "👍 Like";
        });
    }

    function addEditedIndicator(contentElement) {
        if (!contentElement.nextElementSibling?.classList.contains('edited-indicator')) {
            const editedIndicator = document.createElement("small");
            editedIndicator.classList.add("text-muted", "edited-indicator");
            editedIndicator.textContent = "(edited)";
            contentElement.insertAdjacentElement('afterend', editedIndicator);
        }
    }

    function updateEditButtonContent(messageElement, newContent) {
        const editBtn = messageElement.querySelector(".edit-btn");
        if (editBtn) editBtn.dataset.content = newContent;
    }

    function createMessageActions(user, messageId, message) {
        const messageActions = document.createElement("div");
        messageActions.classList.add("message-actions", "position-absolute", "top-0", "end-0", "me-2", "mt-2");

        const optionsButton = document.createElement("button");
        optionsButton.classList.add("btn", "btn-sm", "btn-light", "message-options-btn");
        optionsButton.textContent = "...";

        const messageMenu = document.createElement("div");
        messageMenu.classList.add("message-menu", "d-none", "bg-light", "border", "rounded", "shadow-sm", "p-2");

        const btnContainer = document.createElement("div");
        btnContainer.classList.add("d-flex", "flex-wrap", "gap-1");

        const likeButton = document.createElement("button");
        likeButton.classList.add("btn", "btn-sm", "btn-outline-primary", "me-1", "like-btn");
        likeButton.textContent = "👍 Like";
        likeButton.dataset.messageId = messageId;
        likeButton.dataset.hasLiked = "false";

        const replyButton = document.createElement("button");
        replyButton.classList.add("btn", "btn-sm", "btn-outline-primary", "reply-btn");
        replyButton.textContent = "↩️ Reply";
        replyButton.dataset.messageId = messageId;
        replyButton.dataset.sender = user;
        replyButton.dataset.content = message;

        const viewProfileLink = document.createElement("a");
        viewProfileLink.href = `/PublicProfile/${user}`;
        viewProfileLink.classList.add("btn", "btn-sm", "btn-outline-primary", "view-profile-btn");
        viewProfileLink.textContent = "👤 Profile";

        btnContainer.appendChild(likeButton);
        btnContainer.appendChild(replyButton);

        if (user === USERNAME) {
            const editButton = document.createElement("button");
            editButton.classList.add("btn", "btn-sm", "btn-outline-primary", "edit-btn");
            editButton.textContent = "✏️ Edit";
            editButton.dataset.messageId = messageId;
            editButton.dataset.content = imagePath;
            btnContainer.appendChild(editButton);

            const deleteButton = document.createElement("button");
            deleteButton.classList.add("btn", "btn-sm", "btn-outline-danger", "delete-btn");
            deleteButton.textContent = "🗑️ Delete";
            deleteButton.dataset.messageId = messageId;
            btnContainer.appendChild(deleteButton);
        }

        btnContainer.appendChild(viewProfileLink);
        messageMenu.appendChild(btnContainer);
        messageActions.appendChild(optionsButton);
        messageActions.appendChild(messageMenu);
        return messageActions;
    }

    function handleLikeButtonClick(likeBtn) {
        if (!USERNAME) {
            alert("Please log in.");
            return;
        }

        const messageId = likeBtn.dataset.messageId;
        const hasLiked = likeBtn.dataset.hasLiked === "true";

        if (hasLiked) {
            connection.invoke("RemoveLike", parseInt(messageId), USERNAME)
                .catch(err => console.error("Error removing like:", err.toString()));
        } else {
            connection.invoke("LikeMessage", parseInt(messageId), USERNAME)
                .catch(err => console.error("Error liking message:", err.toString()));
        }
    }

    function setupReply(messageId, sender, content) {
        isReplying = true;
        replyToId = messageId;
        const replyContainer = document.getElementById("replyContainer");
        replyContainer.classList.remove("d-none");
        document.getElementById("replyToUsername").textContent = sender;
        document.getElementById("replyToContent").textContent = content;
        document.getElementById("messageInput").focus();
    }

    function cancelReply() {
        isReplying = false;
        replyToId = null;
        document.getElementById("replyContainer").classList.add("d-none");
    }

    function showEditInterface(messageId, currentContent) {
        const messageElement = document.getElementById(`message-${messageId}`);
        if (!messageElement) return;

        const contentElement = messageElement.querySelector("p.mb-1");
        if (!contentElement) return;

        contentElement.dataset.originalContent = contentElement.textContent;
        contentElement.style.display = "none";

        const editedIndicator = contentElement.nextElementSibling;
        if (editedIndicator?.classList.contains('edited-indicator')) {
            editedIndicator.style.display = "none";
        }

        const editContainer = document.createElement("div");
        editContainer.className = "edit-container mb-2";
        editContainer.id = `edit-container-${messageId}`;

        const editTextarea = document.createElement("textarea");
        editTextarea.className = "form-control mb-2";
        editTextarea.id = `edit-textarea-${messageId}`;
        editTextarea.value = currentContent;

        const buttonContainer = document.createElement("div");
        buttonContainer.className = "d-flex justify-content-end";

        const saveButton = document.createElement("button");
        saveButton.className = "btn btn-sm btn-primary me-2";
        saveButton.id = "saveEditBtn";
        saveButton.dataset.messageId = messageId;
        saveButton.textContent = "Save";

        const cancelButton = document.createElement("button");
        cancelButton.className = "btn btn-sm btn-secondary";
        cancelButton.id = "cancelEditBtn";
        cancelButton.dataset.messageId = messageId;
        cancelButton.textContent = "Cancel";

        buttonContainer.appendChild(saveButton);
        buttonContainer.appendChild(cancelButton);
        editContainer.appendChild(editTextarea);
        editContainer.appendChild(buttonContainer);

        contentContainer.insertAdjacentElement('afterend', editContainer);
        editTextarea.focus();
    }

    function cancelEdit(messageId) {
        const messageElement = document.getElementById(`message-${messageId}`);
        if (!messageElement) return;

        const contentElement = messageElement.querySelector("p.mb-1");
        const editContainer = document.getElementById(`edit-container-${messageId}`);

        if (contentElement && editContainer) {
            contentElement.style.display = "";
            const editedIndicator = contentElement.nextElementSibling;
            if (editedIndicator?.classList.contains('edited-indicator')) {
                editedIndicator.style.display = "";
            }
            editContainer.remove();
        }
    }

    function saveEdit(messageId) {
        const editTextarea = document.getElementById(`edit-textarea-${messageId}`);
        if (!editTextarea) return;

        const newContent = editTextarea.value.trim();
        if (!newContent) {
            alert("Message cannot be empty");
            return;
        }

        connection.invoke("EditMessage", parseInt(messageId), USERNAME, newContent)
            .then(() => {
                const messageElement = document.getElementById(`message-${messageId}`);
                if (messageElement) {
                    updateEditButtonContent(messageElement, newContent);
                    cancelEdit(messageId);
                }
            })
            .catch(err => {
                console.error("Error editing message:", err.toString());
                alert("Error saving your edit. Please try again.");
            });
    }

    function setupSearchFunctionality() {
        const searchInput = document.getElementById('messageSearch');
        const clearSearchBtn = document.getElementById('clearSearchBtn');
        const searchResultsDropdown = document.getElementById('searchResultsDropdown');
        const searchResultsList = document.getElementById('searchResultsList');
        const matchCountElement = document.getElementById('matchCount');
        const closeSearchResultsBtn = document.getElementById('closeSearchResultsBtn');

        function performSearch() {
            const searchTerm = searchInput.value.trim().toLowerCase();
            if (!searchTerm) {
                searchResultsDropdown.classList.add('d-none');
                clearSearchBtn.classList.add('d-none');
                return;
            }

            clearSearchBtn.classList.remove('d-none');
            const matchingMessages = findMatchingMessages(searchTerm);
            updateSearchResults(matchingMessages);
            searchResultsDropdown.classList.remove('d-none');
        }

        function findMatchingMessages(searchTerm) {
            const messageItems = document.querySelectorAll('.message-item');
            const matches = [];

            messageItems.forEach((message, index) => {
                const messageId = message.id.split('-')[1];
                const contentElement = message.querySelector('p.mb-1');
                const senderElement = message.querySelector('small.text-muted');
                const replyElement = message.querySelector('.reply-content');

                const messageContent = contentElement?.textContent.toLowerCase() || '';
                const senderInfo = senderElement?.textContent.toLowerCase() || '';
                const replyContent = replyElement?.textContent.toLowerCase() || '';

                if (messageContent.includes(searchTerm) || senderInfo.includes(searchTerm) || replyContent.includes(searchTerm)) {
                    const senderText = senderElement?.textContent.split('•')[0].trim().replace(/Student|Admin/g, '').trim() || '';
                    const timestamp = senderElement?.textContent.split('•')[1]?.trim() || '';
                    matches.push({
                        id: messageId,
                        content: messageContent,
                        sender: senderText,
                        timestamp,
                        element: message,
                        index
                    });
                }
            });

            return matches;
        }

        function updateSearchResults(matches) {
            matchCountElement.textContent = matches.length;
            searchResultsList.innerHTML = '';

            if (matches.length === 0) {
                const noResults = document.createElement('div');
                noResults.className = 'p-3 text-muted text-center';
                noResults.textContent = 'No matching messages found';
                searchResultsList.appendChild(noResults);
                return;
            }

            matches.forEach(match => {
                const resultItem = document.createElement('div');
                resultItem.className = 'search-result-item p-2 border-bottom';
                resultItem.dataset.messageId = match.id;

                const highlightedContent = truncateAndHighlight(match.content, searchTerm);
                resultItem.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center mb-1">
                        <span class="fw-bold">${match.sender}</span>
                        <small class="text-muted">${match.timestamp}</small>
                    </div>
                    <div class="message-preview">${highlightedContent}</div>
                `;

                resultItem.addEventListener('click', () => scrollToMessage(match.element, match.id));
                searchResultsList.appendChild(resultItem);
            });
        }

        function truncateAndHighlight(content, searchTerm) {
            const maxLength = 80;
            if (content.length <= maxLength) return content;

            const matchPos = content.indexOf(searchTerm);
            let startPos = Math.max(0, matchPos - Math.floor(maxLength / 2));
            if (startPos + maxLength > content.length) {
                startPos = Math.max(0, content.length - maxLength);
            }

            return (startPos > 0 ? '...' : '') +
                   content.substring(startPos, startPos + maxLength) +
                   (startPos + maxLength < content.length ? '...' : '');
        }

        function scrollToMessage(messageElement, messageId) {
            if (!messageElement) return;

            document.querySelectorAll('.message-item.highlight-jump').forEach(item => item.classList.remove('highlight-jump'));
            messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            messageElement.classList.add('highlight-jump');
            setTimeout(() => messageElement.classList.remove('highlight-jump'), 2000);
            searchResultsDropdown.classList.add('d-none');
        }

        function clearSearch() {
            searchInput.value = '';
            searchResultsDropdown.classList.add('d-none');
            clearSearchBtn.classList.add('d-none');
        }

        searchInput.addEventListener('input', performSearch);
        clearSearchBtn.addEventListener('click', clearSearch);
        closeSearchResultsBtn.addEventListener('click', () => searchResultsDropdown.classList.add('d-none'));

        document.addEventListener('click', (event) => {
            if (!event.target.closest('.search-container') && !searchResultsDropdown.classList.contains('d-none')) {
                searchResultsDropdown.classList.add('d-none');
            }
        });

        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                e.preventDefault();
                searchInput.focus();
            }
            if (e.key === 'Escape') {
                if (document.activeElement === searchInput) clearSearch();
                else if (!searchResultsDropdown.classList.contains('d-none')) searchResultsDropdown.classList.add('d-none');
            }
        });
    }

            async function uploadImageWithMessage(file, message) {
        try {
            // Client-side validation
            const maxSizeBytes = 5 * 1024 * 1024; // 5MB
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];

            if (!allowedTypes.includes(file.type)) {
                throw new Error('Invalid file type. Only JPEG, PNG, and GIF are allowed.');
            }

            if (file.size > maxSizeBytes) {
                throw new Error('File is too large. Maximum size is 5MB.');
            }

            const formData = new FormData();
            formData.append("imageFile", file);
            formData.append("messageContent", message);

            const response = await fetch("/MessHall?handler=UploadImage", {
                method: "POST",
                body: formData,
                credentials: "same-origin"
            });

            // Log the raw response for debugging
            const responseText = await response.text();
            console.log("Raw response:", responseText);

            // Try to parse the response
            let data;
            try {
                data = JSON.parse(responseText);
            } catch (parseError) {
                console.error("JSON Parsing Error:", parseError);
                throw new Error(`Server returned non-JSON response: ${responseText}`);
            }

            if (!response.ok) {
                throw new Error(data.error || 'Upload failed');
            }

            if (data.success) {
                // Reset UI elements
                const messageInput = document.getElementById("messageInput");
                const imageInput = document.getElementById("imageInput");
                const imageLabel = document.getElementById("imageLabel");

                messageInput.value = "";
                imageInput.value = "";
                imageLabel.classList.remove("btn-primary");
                imageLabel.classList.add("btn-secondary");

                console.log("Message uploaded successfully with ID:", data.messageId);
                cancelReply();
            } else {
                throw new Error(data.error || 'Unknown server error');
            }
        } catch (error) {
            console.error("Upload error:", error.message);
            alert(`Failed to send message/image: ${error.message}`);
            throw error; // Re-throw to allow further handling
        }
    }

    function formatTimestamp(date) {
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        return `${year}-${month}-${day} | ${hours}:${minutes}`;
    }
</script>

<style>
    .message-actions {
        position: absolute;
        top: 0;
        right: 0;
        margin-top: 0.5rem;
        margin-right: 0.5rem;
        display: flex;
        align-items: center;
    }

    .message-options-btn {
        padding: 0.1rem 0.5rem;
        line-height: 1;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f8f9fa;
        cursor: pointer;
    }

        .message-options-btn:hover {
            background-color: #e9ecef;
        }

    .message-menu {
        position: absolute;
        top: 100%;
        right: 0;
        z-index: 10;
        min-width: 200px;
    }

        .message-menu .d-flex {
            flex-wrap: wrap;
        }

        .message-menu button,
        .message-menu a {
            margin: 2px;
            flex: 1 0 auto;
            text-align: center;
            white-space: nowrap;
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }

            .message-menu button:hover,
            .message-menu a:hover {
                background-color: #e9ecef;
            }

    .likes-count {
        font-size: 0.8rem;
    }

    .message-item {
        transition: opacity 0.5s ease;
    }

    .edited-indicator {
        font-style: italic;
        font-size: 0.75rem;
        opacity: 0.7;
        margin-left: 5px;
    }

    .edit-container {
        width: 100%;
    }

    .search-container {
        position: relative;
        z-index: 1000;
        margin-bottom: 10px;
    }

    #messageSearch:focus {
        box-shadow: none;
        border-color: #ced4da;
    }

    .search-results-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        max-height: 300px;
        overflow-y: auto;
        background-color: white;
        border: 1px solid rgba(0,0,0,.125);
        border-radius: 0.375rem;
        box-shadow: 0 4px 6px rgba(0,0,0,.1);
        z-index: 1050;
    }

    .search-results-header {
        background-color: #f8f9fa;
        position: sticky;
        top: 0;
        z-index: 1;
    }

    .search-result-item {
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .search-result-item:hover {
            background-color: #f8f9fa;
        }

    .message-preview {
        white-space: pre-wrap;
        overflow: hidden;
        text-overflow: ellipsis;
        color: #6c757d;
        font-size: 0.9rem;
    }

    .highlight-jump {
        animation: highlight-pulse 2s ease-out;
    }

    @@keyframes highlight-pulse {
        0% {
            background-color: rgba(173, 216, 230, 0.7);
        }

        100% {
            background-color: transparent;
        }
    }
</style>