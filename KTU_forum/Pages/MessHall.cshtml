@page
@model KTU_forum.Pages.MessHallModel
@{
    var roomName = Model.RoomName;
    var username = Model.Username;
    var profilePic = Model.ProfilePicturePath;
    var userRole = Model.UserRole;
}
<div class="container-fluid vh-100 d-flex flex-column">
    <div class="card shadow border-0 rounded-4 mb-0 flex-fill">
        <div class="card-body p-4 d-flex flex-column">
            <!-- Chat Messages Area -->
            <div class="messages-container flex-fill overflow-auto" style="max-height: calc(100vh - 150px);">
                <ul id="messagesList" class="list-unstyled">
                    @foreach (var message in Model.Messages)
                    {
                        var formattedTime = message.SentAt.ToString("yyyy-MM-dd | HH:mm");
                        <li class="d-flex align-items-start mb-3 message-item position-relative" id="message-@message.MessageId">
                            @if (string.IsNullOrWhiteSpace(message.SenderProfilePic))
                            {
                                <img src="@(string.IsNullOrWhiteSpace(message.SenderProfilePic)
                                         ? "profile-pictures/default.png"
                                         : message.SenderProfilePic)"
                                         class="rounded-circle profile-pic me-2"
                                         style="width: 40px; height: 40px;" />
                            }
                            else
                            {
                                <img src="@message.SenderProfilePic"
                                     class="rounded-circle profile-pic"
                                     style="width: 40px; height: 40px; object-fit: cover; margin-right: 10px;" />
                            }
                            <div style="width: 100%;">
                                <!-- Reply indicator (if this message is a reply) -->
                                @if (message.IsReply)
                                {
                                    <div class="reply-info mb-1 border-start border-2 ps-2" style="border-color: #e0e0e0 !important; font-size: 0.85rem; background-color: #f8f9fa; border-radius: 0.25rem; padding: 0.25rem;">
                                        <div class="reply-sender fw-bold text-muted">
                                            <i class="bi bi-reply"></i> Replying to @message.ReplyToUsername
                                        </div>
                                        <div class="reply-content text-muted text-truncate" style="max-width: 90%;">
                                            @message.ReplyToContent
                                        </div>
                                    </div>
                                }

                                <small class="text-muted">
                                    @message.SenderUsername
                                    @if (!string.IsNullOrEmpty(message.SenderRole))
                                    {
                                        <span class="badge bg-success text-white ms-1" style="opacity: 0.4; font-size: 0.75rem;">@message.SenderRole</span>
                                    }
                                    • @formattedTime
                                </small>
                                <p class="mb-1">@message.Content</p>
                                <!-- Like counter display -->
                                <div class="d-flex align-items-center">
                                    <span class="likes-count badge bg-light text-dark me-2" id="likes-@message.MessageId">
                                        @if (message.LikesCount > 0)
                                        {
                                            <i class="bi bi-hand-thumbs-up-fill"></i> @message.LikesCount
                                        }
                                    </span>
                                </div>
                            </div>
                            <div class="message-actions position-absolute top-0 end-0 me-2 mt-2">
                                <button class="btn btn-sm btn-light message-options-btn">...</button>
                                <div class="message-menu d-none bg-light border rounded shadow-sm p-2">
                                    <button class="btn btn-sm btn-outline-primary me-1 like-btn" data-message-id="@message.MessageId">👍 Like</button>
                                    <button class="btn btn-sm btn-outline-primary reply-btn" data-message-id="@message.MessageId"
                                            data-sender="@message.SenderUsername" data-content="@message.Content">
                                        ↩️ Reply
                                    </button>
                                    <a href="/PublicProfile/@message.SenderUsername" class="btn btn-sm btn-outline-primary view-profile-btn">
                                        👤 View Profile
                                    </a>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
            <!-- Message Input Area -->
            <div class="message-input-area mt-3">
                <!-- Reply info box (hidden by default) -->
                <div id="replyContainer" class="reply-container bg-light p-2 mb-2 rounded d-none">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="fw-bold"><i class="bi bi-reply"></i> Replying to <span id="replyToUsername"></span></span>
                            <p class="mb-0 text-muted small text-truncate" id="replyToContent"></p>
                        </div>
                        <button id="cancelReplyBtn" class="btn btn-sm text-muted" title="Cancel reply">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </div>
                <div class="d-flex">
                    <input type="text" id="messageInput" class="form-control me-2" placeholder="Enter your message" />
                    <button id="sendButton" class="btn btn-primary">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SignalR JS Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.10/signalr.min.js"></script>
<script>
    var username = '@username';
    var profilePicPath = '@profilePic';
    var roomName = '@roomName';
    var userRole = '@userRole';
    let isReplying = false;
    let replyToId = null;

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.start()
        .then(function () {
            connection.invoke("JoinRoom", roomName);
            console.log("Connected to SignalR hub!");
        })
        .catch(function (err) {
            console.error("SignalR Connection Error:", err.toString());
        });

    // Handle like updates from server
    connection.on("UpdateLikes", function (messageId, likeCount) {
        console.log("Received UpdateLikes:", messageId, likeCount);
        const likesCountElement = document.getElementById("likes-" + messageId);
        if (likesCountElement) {
            if (likeCount > 0) {
                likesCountElement.innerHTML = `<i class="bi bi-hand-thumbs-up-fill"></i> ${likeCount}`;
            } else {
                likesCountElement.innerHTML = '';
            }
        }
    });

    // Handle error messages from server
    connection.on("ErrorMessage", function (errorMessage) {
        console.error("Server error:", errorMessage);
        alert(errorMessage);
    });

    connection.on("ReceiveMessage", function (user, message, profilePic, role) {
        const messagesList = document.getElementById("messagesList");
        const messageItem = document.createElement("li");
        messageItem.classList.add("d-flex", "align-items-start", "mb-3", "message-item", "position-relative");

        const img = document.createElement("img");
        img.src = profilePic && profilePic.trim() !== "" ? profilePic : "/profile-pictures/default.png";
        img.classList.add("rounded-circle", "profile-pic");
        img.style.width = "40px";
        img.style.height = "40px";
        img.style.objectFit = "cover";
        img.style.marginRight = "10px";

        const messageContent = document.createElement("div");
        const meta = document.createElement("small");
        meta.classList.add("text-muted");

        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const day = currentDate.getDate().toString().padStart(2, '0');
        const hours = currentDate.getHours().toString().padStart(2, '0');
        const minutes = currentDate.getMinutes().toString().padStart(2, '0');
        const formattedDate = `${year}-${month}-${day} | ${hours}:${minutes}`;

        // Create the username and role part
        meta.innerHTML = `${user}`;

        // Add role badge if role exists
        if (role) {
            const roleBadge = document.createElement("span");
            roleBadge.classList.add("badge", "bg-success", "text-white", "ms-1");
            roleBadge.style.opacity = "0.4";
            roleBadge.style.fontSize = "0.75rem";
            roleBadge.textContent = role;
            meta.appendChild(roleBadge);
        }

        // Add the timestamp
        meta.innerHTML += ` • ${formattedDate}`;

        const messageText = document.createElement("p");
        messageText.classList.add("mb-1");
        messageText.textContent = message;

        // Add likes count element
        const likesContainer = document.createElement("div");
        likesContainer.classList.add("d-flex", "align-items-center");

        const likesCount = document.createElement("span");
        likesCount.classList.add("likes-count", "badge", "bg-light", "text-dark", "me-2");
        likesCount.id = "likes-TEMP_ID"; // Will be updated when we get the real message ID

        likesContainer.appendChild(likesCount);

        const messageActions = document.createElement("div");
        messageActions.classList.add("message-actions", "position-absolute", "top-0", "end-0", "me-2", "mt-2");

        const optionsButton = document.createElement("button");
        optionsButton.classList.add("btn", "btn-sm", "btn-light", "message-options-btn");
        optionsButton.textContent = "...";

        const messageMenu = document.createElement("div");
        messageMenu.classList.add("message-menu", "d-none", "bg-light", "border", "rounded", "shadow-sm", "p-2");

        const likeButton = document.createElement("button");
        likeButton.classList.add("btn", "btn-sm", "btn-outline-primary", "me-1", "like-btn");
        likeButton.textContent = "👍 Like";
        likeButton.dataset.messageId = "TEMP_ID"; // You'll need to handle setting the actual message ID on creation

        const replyButton = document.createElement("button");
        replyButton.classList.add("btn", "btn-sm", "btn-outline-secondary", "reply-btn");
        replyButton.textContent = "↩️ Reply";

        const viewProfileLink = document.createElement("a");
        viewProfileLink.href = `/PublicProfile/${user}`;
        viewProfileLink.classList.add("btn", "btn-sm", "btn-outline-info", "view-profile-btn");
        viewProfileLink.textContent = "👤 View Profile";

        messageMenu.appendChild(likeButton);
        messageMenu.appendChild(replyButton);
        messageMenu.appendChild(viewProfileLink);
        messageActions.appendChild(optionsButton);
        messageActions.appendChild(messageMenu);

        messageContent.appendChild(meta);
        messageContent.appendChild(messageText);
        messageContent.appendChild(likesContainer);
        messageItem.appendChild(img);
        messageItem.appendChild(messageContent);
        messageItem.appendChild(messageActions);
        messagesList.appendChild(messageItem);

        messagesList.scrollTop = messagesList.scrollHeight;

        // Add the click event to the like button (moved inside the message creation)
        likeButton.addEventListener("click", function () {
            const messageId = this.dataset.messageId; // Get the message ID from the button
            connection.invoke("LikeMessage", parseInt(messageId), username)
                .catch(err => console.error("Error liking message:", err.toString()));
        });
    });

        // Add this ReceiveReply handler after your existing ReceiveMessage handler

    connection.on("ReceiveReply", function (user, message, profilePic, role, messageId, replyToId, originalSender, originalContent) {
        const messagesList = document.getElementById("messagesList");
        const messageItem = document.createElement("li");
        messageItem.classList.add("d-flex", "align-items-start", "mb-3", "message-item", "position-relative");
        messageItem.id = "message-" + messageId;

    // Use default image if profilePic is missing or empty
    const profileImageSrc = profilePic && profilePic.trim() !== "" ? profilePic : "/profile-pictures/default.png";

        if (!profilePic || profilePic.trim() === "") {
        const profilePlaceholder = document.createElement("div");
        profilePlaceholder.classList.add("profile-pic-placeholder", "rounded-circle", "bg-light", "d-flex", "justify-content-center", "align-items-center");
        profilePlaceholder.style.width = "40px";
        profilePlaceholder.style.height = "40px";
        profilePlaceholder.style.marginRight = "10px";

        const icon = document.createElement("i");
        icon.classList.add("bi", "bi-person-circle");
        icon.style.fontSize = "1.5rem";

        profilePlaceholder.appendChild(icon);
        messageItem.appendChild(profilePlaceholder);
        } 
        else {
        const img = document.createElement("img");
        img.src = profilePic;
        img.classList.add("rounded-circle", "profile-pic");
        img.style.width = "40px";
        img.style.height = "40px";
        img.style.objectFit = "cover";
        img.style.marginRight = "10px";
        messageItem.appendChild(img);
        }

        // Content container
        const contentContainer = document.createElement("div");
        contentContainer.style.width = "100%";

        // Create reply info
        const replyInfo = document.createElement("div");
        replyInfo.classList.add("reply-info", "mb-1", "border-start", "border-2", "ps-2");
        replyInfo.style.borderColor = "#e0e0e0 !important";
        replyInfo.style.fontSize = "0.85rem";
        replyInfo.style.backgroundColor = "#f8f9fa";
        replyInfo.style.borderRadius = "0.25rem";
        replyInfo.style.padding = "0.25rem";

        const replySender = document.createElement("div");
        replySender.classList.add("reply-sender", "fw-bold", "text-muted");
        replySender.innerHTML = `<i class="bi bi-reply"></i> Replying to ${originalSender}`;

        const replyContent = document.createElement("div");
        replyContent.classList.add("reply-content", "text-muted", "text-truncate");
        replyContent.style.maxWidth = "90%";
        replyContent.textContent = originalContent;

        replyInfo.appendChild(replySender);
        replyInfo.appendChild(replyContent);
        contentContainer.appendChild(replyInfo);

        const meta = document.createElement("small");
        meta.classList.add("text-muted");

        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const day = currentDate.getDate().toString().padStart(2, '0');
        const hours = currentDate.getHours().toString().padStart(2, '0');
        const minutes = currentDate.getMinutes().toString().padStart(2, '0');
        const formattedDate = `${year}-${month}-${day} | ${hours}:${minutes}`;

        // Create the username text node first
        const usernameText = document.createTextNode(user);
        meta.appendChild(usernameText);

        // Add role badge if role exists
        if (role) {
            const roleBadge = document.createElement("span");
            roleBadge.classList.add("badge", "bg-success", "text-white", "ms-1");
            roleBadge.style.opacity = "0.4";
            roleBadge.style.fontSize = "0.75rem";
            roleBadge.textContent = role;
            meta.appendChild(roleBadge);
        }

        // Add the timestamp
        const timestampText = document.createTextNode(` • ${formattedDate}`);
        meta.appendChild(timestampText);
        contentContainer.appendChild(meta);

        const messageText = document.createElement("p");
        messageText.classList.add("mb-1");
        messageText.textContent = message;
        contentContainer.appendChild(messageText);

        // Add likes count element
        const likesContainer = document.createElement("div");
        likesContainer.classList.add("d-flex", "align-items-center");

        const likesCount = document.createElement("span");
        likesCount.classList.add("likes-count", "badge", "bg-light", "text-dark", "me-2");
        likesCount.id = "likes-" + messageId;

        likesContainer.appendChild(likesCount);
        contentContainer.appendChild(likesContainer);

        // Message actions
        const messageActions = document.createElement("div");
        messageActions.classList.add("message-actions", "position-absolute", "top-0", "end-0", "me-2", "mt-2");

        const optionsButton = document.createElement("button");
        optionsButton.classList.add("btn", "btn-sm", "btn-light", "message-options-btn");
        optionsButton.textContent = "...";

        const messageMenu = document.createElement("div");
        messageMenu.classList.add("message-menu", "d-none", "bg-light", "border", "rounded", "shadow-sm", "p-2");

        const likeButton = document.createElement("button");
        likeButton.classList.add("btn", "btn-sm", "btn-outline-primary", "me-1", "like-btn");
        likeButton.textContent = "👍 Like";
        likeButton.dataset.messageId = messageId;

        const replyButton = document.createElement("button");
        replyButton.classList.add("btn", "btn-sm", "btn-outline-primary", "reply-btn");
        replyButton.textContent = "↩️ Reply";
        replyButton.dataset.messageId = messageId;
        replyButton.dataset.sender = user;
        replyButton.dataset.content = message;

        const viewProfileLink = document.createElement("a");
        viewProfileLink.href = `/PublicProfile/${user}`;
        viewProfileLink.classList.add("btn", "btn-sm", "btn-outline-primary", "view-profile-btn");
        viewProfileLink.textContent = "👤 View Profile";

        messageMenu.appendChild(likeButton);
        messageMenu.appendChild(replyButton);
        messageMenu.appendChild(viewProfileLink);
        messageActions.appendChild(optionsButton);
        messageActions.appendChild(messageMenu);

        messageItem.appendChild(contentContainer);
        messageItem.appendChild(messageActions);
        messagesList.appendChild(messageItem);

        messagesList.scrollTop = messagesList.scrollHeight;

        // Add the click event to the like button
        likeButton.addEventListener("click", function () {
            connection.invoke("LikeMessage", parseInt(messageId), username)
                .catch(err => console.error("Error liking message:", err.toString()));
        });

        // Add the click event to the reply button
        replyButton.addEventListener("click", function () {
            isReplying = true;
            replyToId = this.dataset.messageId;

            document.getElementById("replyContainer").classList.remove("d-none");
            document.getElementById("replyToUsername").textContent = this.dataset.sender;
            document.getElementById("replyToContent").textContent = this.dataset.content;

            document.getElementById("messageInput").focus();
        });
    });

    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("message-options-btn")) {
            const messageActions = event.target.closest(".message-actions");
            const menu = messageActions.querySelector(".message-menu");
            menu.classList.toggle("d-none");
        } else if (!event.target.closest(".message-actions")) {
            // Close any open menus if clicking outside the actions area
            document.querySelectorAll(".message-menu:not(.d-none)").forEach(menu => {
                menu.classList.add("d-none");
            });
        }

        // Handle clicks on like buttons in the existing messages
        if (event.target.classList.contains("like-btn")) {
            const messageId = event.target.dataset.messageId;
            connection.invoke("LikeMessage", parseInt(messageId), username)
                .catch(err => console.error("Error liking message:", err.toString()));
        }
    });

    document.getElementById("sendButton").addEventListener("click", function () {
        sendMessage();
    });

    document.getElementById("messageInput").addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
            sendMessage();
        }
    });

        // Handle reply button clicks
    document.addEventListener("click", function (event) {
        // Reply button click handling
        if (event.target.classList.contains("reply-btn")) {
            const messageId = event.target.dataset.messageId;
            const sender = event.target.dataset.sender;
            const content = event.target.dataset.content;

            // Set reply state
            isReplying = true;
            replyToId = messageId;

            // Show reply UI
            document.getElementById("replyContainer").classList.remove("d-none");
            document.getElementById("replyToUsername").textContent = sender;
            document.getElementById("replyToContent").textContent = content;

            // Focus the input field
            document.getElementById("messageInput").focus();

            // Close any open menus
            document.querySelectorAll(".message-menu:not(.d-none)").forEach(menu => {
                menu.classList.add("d-none");
            });
        }
    });

        document.getElementById("cancelReplyBtn").addEventListener("click", function() {
        cancelReply();
    });

        function cancelReply() {
        isReplying = false;
        replyToId = null;
        document.getElementById("replyContainer").classList.add("d-none");
    }

        function sendMessage() {
        const message = document.getElementById("messageInput").value;
        if (!username) {
            alert("Please log in.");
            return;
        }
        if (!message.trim()) {
            alert("Please input a message.");
            return;
        }

        if (isReplying && replyToId) {
            // Send as a reply
            connection.invoke("SendReply", username, roomName, message, parseInt(replyToId), userRole)
                .catch(err => console.error("Error sending reply:", err.toString()));
        } else {
            // Send as a normal message
            connection.invoke("SendMessage", username, roomName, message, userRole)
                .catch(err => console.error("Error sending message:", err.toString()));
        }

        // Clear input and reset reply state
        document.getElementById("messageInput").value = "";
        cancelReply();
    }

    // Scroll to bottom when page loads
    window.onload = function () {
        const messagesList = document.getElementById("messagesList");
        messagesList.scrollTop = messagesList.scrollHeight;
    }
</script>

<style>
    /* Your CSS rules here */
    .message-actions {
        position: absolute;
        top: 0;
        right: 0;
        margin-top: 0.5rem;
        margin-right: 0.5rem;
        display: flex;
        align-items: center;
    }

    .message-options-btn {
        padding: 0.1rem 0.5rem;
        line-height: 1;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f8f9fa;
        cursor: pointer;
    }

        .message-options-btn:hover {
            background-color: #e9ecef;
        }

    .message-menu {
        position: absolute;
        top: 100%; /* Position below the button */
        right: 0;
        z-index: 10;
        min-width: 100px; /* Adjust as needed */
    }

        .message-menu button,
        .message-menu a {
            display: block;
            width: 100%;
            padding: 0.25rem 0.5rem;
            text-align: left;
            white-space: nowrap;
        }

            .message-menu button:hover,
            .message-menu a:hover {
                background-color: #e9ecef;
            }

    .likes-count {
        font-size: 0.8rem;
    }
</style>