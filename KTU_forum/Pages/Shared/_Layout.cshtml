<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>KTU FORUMAS</title>
    <!-- Favicon-->
    <link rel="icon" type="image/x-icon" href="~/assets/ktu_logo.png" />
    <!-- Custom Google font-->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@100;200;300;400;500;600;700;800;900&amp;display=swap" rel="stylesheet" />
    <!-- Bootstrap icons-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css" rel="stylesheet" />
    <!-- Core theme CSS (includes Bootstrap)-->
    <link href="css/styles.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.10/signalr.min.js"></script>

    <style>
        .online-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            background-color: #28a745;
            border-radius: 50%;
            margin-right: 5px;
        }

        .online-user-item {
            display: flex;
            align-items: center;
            padding: 8px 16px;
        }

        .online-user-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            margin-right: 8px;
            object-fit: cover;
        }

        .online-user-name {
            margin-left: 5px;
        }

        .online-users-count {
            font-size: 0.8rem;
            color: #6c757d;
            margin-left: 5px;
        }
    </style>

    <script>
        // Function to get anti-forgery token for AJAX requests
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }
    </script>

    <form id="antiforgery-form" style="display:none;">
        @Html.AntiForgeryToken()
    </form>


</head>
<body class="d-flex flex-column h-100">
    <!-- For accesing login-->
    @inject IHttpContextAccessor HttpContextAccessor
    <main class="flex-shrink-0">
            <header>
                <nav class="navbar navbar-expand-lg navbar-light bg-white py-3">
                    <div class="container px-5">
                        <a><span class="fw-bolder text-primary h3">KTU FORUM</span></a>
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav ms-auto mb-2 mb-lg-0 small fw-bolder">

                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" id="onlineUsersDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <span class="online-indicator"></span> Online Users
                                    </a>
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="onlineUsersDropdown" id="onlineUsersList">
                                        <li><a class="dropdown-item text-center" href="#">Loading users...</a></li>
                                    </ul>
                                </li>

                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-area="" asp-page="/Rooms">Rooms</a>
                                </li>

                                @if (HttpContextAccessor.HttpContext.Session.GetString("Username") == null)
                                {
                                    <li class="nav-item">
                                        <a class="nav-link text-dark" asp-area="" asp-page="/Login">Login</a>
                                    </li>
                                }
                                else
                                {
                                    <li class="nav-item">
                                        <a class="nav-link text-dark" asp-area="" asp-page="/Profile">Profile</a>
                                    </li>

                                <form method="post" asp-page="/Login" asp-page-handler="Logout">
                                    <button type="submit" class="btn btn-danger">Logout</button>
                                    </form>

                                }
                            </ul>
                        </div>
                    </div>
                </nav>
            </header>
    </main>


            <div class="container">
                <main role="main" class="pb-3">
                    @RenderBody()
                </main>
            </div>

            <footer class="border-top footer text-muted">
                <div class="container">
                    &copy; 2025 - KTU_forum - <a asp-area="" asp-page="/Privacy">Privacy</a>
                </div>
            </footer>

            <script src="~/lib/jquery/dist/jquery.min.js"></script>
            <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
            <script src="~/js/scripts.js" asp-append-version="true"></script>
            <script src="~/js/session-manager.js"></script>

            @await RenderSectionAsync("Scripts", required: false)
    <!-- Session Timeout Modal -->
    <div class="modal fade" id="sessionTimeoutModal" tabindex="-1" aria-labelledby="sessionTimeoutLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning">
                    <h5 class="modal-title" id="sessionTimeoutLabel">Session Expiring Soon</h5>
                </div>
                <div class="modal-body">
                    Your session is about to expire due to inactivity.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="endSession()">Log Out</button>
                    <button type="button" class="btn btn-primary" onclick="extendSession()">Stay Logged In</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Function to fetch online users
            function fetchOnlineUsers() {
                fetch('/OnlineUsers')
                    .then(response => response.json())
                    .then(data => {
                        const usersList = document.getElementById('onlineUsersList');

                        // Clear the list
                        usersList.innerHTML = '';

                        if (data.length === 0) {
                            // If no users are online
                            const emptyItem = document.createElement('li');
                            emptyItem.innerHTML = '<a class="dropdown-item text-center" href="#">No users online</a>';
                            usersList.appendChild(emptyItem);
                        } else {
                            // Add header with count
                            const headerItem = document.createElement('li');
                            headerItem.innerHTML = `<div class="dropdown-header">Online Users <span class="online-users-count">(${data.length})</span></div>`;
                            usersList.appendChild(headerItem);

                            // Add divider
                            const dividerItem = document.createElement('li');
                            dividerItem.innerHTML = '<hr class="dropdown-divider">';
                            usersList.appendChild(dividerItem);

                            // Add each user
                            data.forEach(user => {
                                const listItem = document.createElement('li');

                                const userItem = document.createElement('a');
                                userItem.className = 'dropdown-item online-user-item';
                                userItem.href = `/PublicProfile/${user.username}`;

                                const indicator = document.createElement('span');
                                indicator.className = 'online-indicator';

                                const avatar = document.createElement('img');
                                avatar.className = 'online-user-avatar';
                                avatar.src = user.profilePicturePath || '/profile-pictures/default.png';
                                avatar.alt = user.username;

                                const userName = document.createElement('span');
                                userName.className = 'online-user-name';
                                userName.textContent = user.username;

                                // Add role badge if user has a role
                                if (user.role) {
                                    const roleBadge = document.createElement('span');
                                    roleBadge.className = 'badge bg-success text-white ms-1';
                                    roleBadge.style.opacity = '0.4';
                                    roleBadge.style.fontSize = '0.75rem';
                                    roleBadge.textContent = user.role;
                                    userName.appendChild(roleBadge);
                                }

                                userItem.appendChild(indicator);
                                userItem.appendChild(avatar);
                                userItem.appendChild(userName);

                                listItem.appendChild(userItem);
                                usersList.appendChild(listItem);
                            });
                        }

                        // Update dropdown label with count
                        const dropdownLabel = document.getElementById('onlineUsersDropdown');
                        dropdownLabel.innerHTML = `<span class="online-indicator"></span> Online Users (${data.length})`;
                    })
                    .catch(error => {
                        console.error('Error fetching online users:', error);
                    });
            }

            // Fetch online users on page load
            fetchOnlineUsers();

            // Fetch online users every 30 seconds
            setInterval(fetchOnlineUsers, 30000);

            // Update user activity whenever the page is interacted with
            const updateActivity = function() {
                fetch('/OnlineUsers', { method: 'GET' });
            };

            // Monitor user activity
            const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];
            activityEvents.forEach(function(eventName) {
                document.addEventListener(eventName, updateActivity, { passive: true, once: true });
            });
        });
    </script>

    <!-- Private Messaging Components -->
@if (HttpContextAccessor.HttpContext.Session.GetString("Username") != null)
{
    <div id="messaging-container">
        <!-- Messaging Icon with Badge -->
        <button id="message-icon" class="btn btn-primary rounded-circle message-button position-fixed">
            <i class="bi bi-chat-dots-fill"></i>
            <span id="unread-badge" class="badge bg-danger position-absolute d-none">0</span>
        </button>

        <!-- Messaging Panel -->
        <div id="messaging-panel" class="messaging-panel d-none">
            <div class="messaging-header">
                <h5 class="mb-0">Messages</h5>
                <div>
                    <button id="new-message-btn" class="btn btn-sm btn-primary me-2">
                        <i class="bi bi-pencil-square"></i> New
                    </button>
                    <button id="close-messaging-btn" class="btn btn-sm btn-light">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            </div>
            
            <div class="messaging-content">
                <!-- Conversations List View -->
                <div id="conversations-view" class="h-100">
                    <div class="list-group conversation-list">
                        <!-- Conversations will be loaded here -->
                        <div class="text-center py-3 text-muted" id="no-conversations-message">
                            <i class="bi bi-chat-dots mb-2" style="font-size: 2rem;"></i>
                            <p>No conversations yet</p>
                        </div>
                    </div>
                </div>
                
                <!-- Active Conversation View (Initially Hidden) -->
                <div id="conversation-view" class="h-100 d-none">
                    <div class="conversation-header border-bottom py-2 px-3 d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <button id="back-to-conversations" class="btn btn-sm btn-light me-2">
                                <i class="bi bi-arrow-left"></i>
                            </button>
                            <img id="conversation-user-pic" src="/profile-pictures/default.png" class="rounded-circle" width="32" height="32">
                            <span id="conversation-username" class="ms-2 fw-bold">Username</span>
                        </div>
                    </div>
                    
                    <div id="messages-container" class="messages-container p-3">
                        <!-- Messages will be loaded here -->
                    </div>
                    
                    <div class="message-input-container p-2 border-top">
                        <div class="input-group">
                            <input type="text" id="message-input" class="form-control" placeholder="Type a message...">
                            <button id="send-message-btn" class="btn btn-primary">
                                <i class="bi bi-send-fill"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- New Message View (Initially Hidden) -->
                <div id="new-message-view" class="h-100 d-none">
                    <div class="new-message-header border-bottom py-2 px-3 d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <button id="back-from-new-message" class="btn btn-sm btn-light me-2">
                                <i class="bi bi-arrow-left"></i>
                            </button>
                            <span class="fw-bold">New Message</span>
                        </div>
                    </div>
                    
                    <div class="p-3">
                        <div class="mb-3">
                            <label for="recipient-username" class="form-label">To:</label>
                            <input type="text" class="form-control" id="recipient-username" placeholder="Username">
                            <div id="username-suggestions" class="list-group mt-1 d-none">
                                <!-- Suggestions will appear here -->
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="new-message-content" class="form-label">Message:</label>
                            <textarea class="form-control" id="new-message-content" rows="3"></textarea>
                        </div>
                        
                        <button id="send-new-message-btn" class="btn btn-primary">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- CSS for Messaging UI -->
    <style>
        .message-button {
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            z-index: 1040;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #unread-badge {
            top: -5px;
            right: -5px;
            font-size: 0.7rem;
        }

        .messaging-panel {
            position: fixed;
            bottom: 80px;
            right: 20px;
            width: 350px;
            height: 500px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1030;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .messaging-header {
            padding: 10px 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .messaging-content {
            flex: 1;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .conversation-list {
            overflow-y: auto;
            max-height: calc(100vh - 150px);
        }

        .conversation-item {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            border-bottom: 1px solid #f1f1f1;
            cursor: pointer;
        }

        .conversation-item:hover {
            background-color: #f8f9fa;
        }

        .conversation-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
            object-fit: cover;
        }

        .conversation-info {
            flex: 1;
        }

        .conversation-name {
            font-weight: 500;
            margin-bottom: 2px;
        }

        .conversation-preview {
            color: #6c757d;
            font-size: 0.85rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }

        .conversation-time {
            font-size: 0.75rem;
            color: #6c757d;
        }

        .unread-indicator {
            width: 10px;
            height: 10px;
            background-color: #0d6efd;
            border-radius: 50%;
            margin-left: 5px;
        }

        .messages-container {
            overflow-y: auto;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .message-bubble {
            max-width: 75%;
            padding: 8px 12px;
            margin-bottom: 8px;
            border-radius: 18px;
            position: relative;
            word-wrap: break-word;
        }

        .message-sent {
            align-self: flex-end;
            background-color: #0d6efd;
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message-received {
            align-self: flex-start;
            background-color: #f1f3f5;
            color: #212529;
            border-bottom-left-radius: 4px;
        }

        .message-time {
            font-size: 0.7rem;
            opacity: 0.8;
            margin-top: 2px;
            text-align: right;
        }

        .message-read-status {
            font-size: 0.7rem;
            margin-top: 2px;
            text-align: right;
        }

        #username-suggestions {
            position: absolute;
            width: calc(100% - 2rem);
            z-index: 1050;
            max-height: 200px;
            overflow-y: auto;
        }

        /* Mobile Responsiveness */
        @@media (max-width: 576px) {
            .messaging-panel {
                width: 100%;
                height: 100%;
                bottom: 0;
                right: 0;
                border-radius: 0;
            }
        }

            .message-bubble {
                position: relative;
            }

            .message-actions-btn {
                position: absolute;
                top: 0;
                right: 0;
                padding: 0.1rem 0.3rem;
                font-size: 0.7rem;
                color: rgba(0,0,0,0.5);
                background: transparent;
                opacity: 0;
                transition: opacity 0.2s;
            }

            .message-bubble:hover .message-actions-btn {
                opacity: 1;
            }

            .message-actions-menu {
                position: absolute;
                top: 100%;
                right: 0;
                background: white;
                border: 1px solid #ddd;
                border-radius: 0.25rem;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                z-index: 10;
            }

            .action-item {
                background: none;
                border: none;
                padding: 0.5rem 1rem;
                text-align: left;
                width: 100%;
                cursor: pointer;
            }

                .action-item:hover {
                    background-color: #f0f0f0;
                }

            .edit-message-field {
                margin-bottom: 0.5rem;
            }

            .reply-container {
                background-color: rgba(0,0,0,0.05);
                border-left: 3px solid #0d6efd;
                padding: 0.5rem;
                margin-bottom: 0.5rem;
                border-radius: 0.25rem;
            }
    </style>
    
    <!-- JavaScript for Messaging Functionality -->
    <script>
        // Global variables
        let currentUsername = '@HttpContextAccessor.HttpContext.Session.GetString("Username")';
        let activeConversationId = null;
        let activeRecipientUsername = null;
        let privateMessageConnection = null;
        let totalUnreadMessages = 0;
        
        document.addEventListener('DOMContentLoaded', function() {
            if (!currentUsername) return;
            
            // Initialize SignalR connection
            initializeSignalR();
            
            // Load conversations
            loadConversations();
            
            // Event listeners
            document.getElementById('message-icon').addEventListener('click', toggleMessagingPanel);
            document.getElementById('close-messaging-btn').addEventListener('click', closeMessagingPanel);
            document.getElementById('back-to-conversations').addEventListener('click', showConversationsList);
            document.getElementById('new-message-btn').addEventListener('click', showNewMessageView);
            document.getElementById('back-from-new-message').addEventListener('click', showConversationsList);
            document.getElementById('send-message-btn').addEventListener('click', sendMessage);
            document.getElementById('message-input').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') sendMessage();
            });
            document.getElementById('send-new-message-btn').addEventListener('click', sendNewMessage);
            
            // Username search suggestions
            document.getElementById('recipient-username').addEventListener('input', searchUsers);
        });
        
        function initializeSignalR() {
            privateMessageConnection = new signalR.HubConnectionBuilder()
                .withUrl("/privateMessageHub")
                .build();
                
            privateMessageConnection.on("ReceivePrivateMessage", (messageId, senderUsername, receiverUsername, content, time, senderProfilePic, isSender) => {
                // If this conversation is currently open, append the message
                if (activeConversationId && 
                    ((currentUsername === senderUsername && receiverUsername === activeRecipientUsername) || 
                     (currentUsername === receiverUsername && senderUsername === activeRecipientUsername))) {
                    appendMessage({
                        id: messageId,
                        senderUsername: senderUsername,
                        content: content,
                        time: time,
                        senderProfilePic: senderProfilePic,
                        isSentByCurrentUser: senderUsername === currentUsername,
                        isRead: false
                    });
                    
                    // If we're receiving the message, mark it as read
                    if (!isSender) {
                        privateMessageConnection.invoke("MarkMessageAsRead", messageId, currentUsername);
                    }
                } else if (!isSender) {
                    // We received a message for a conversation that's not active
                    incrementUnreadCounter();
                }
                
                // Refresh conversations list to update last message
                loadConversations();
            });
            
            privateMessageConnection.on("NewPrivateMessageNotification", (senderUsername, messageId) => {
                // This is a notification that we received a new message
                incrementUnreadCounter();
                
                // Show notification if browser supports it
                if ("Notification" in window && Notification.permission === "granted") {
                    new Notification("New message from " + senderUsername);
                }
            });
            
            privateMessageConnection.on("MessageRead", (messageId) => {
                // Update the read status in the UI
                const readStatusEl = document.querySelector(`.message-read-status[data-message-id="${messageId}"]`);
                if (readStatusEl) {
                    readStatusEl.innerHTML = '<i class="bi bi-check2-all"></i>';
                }
            });
            
            privateMessageConnection.on("ErrorMessage", (errorMessage) => {
                console.error("Error from SignalR:", errorMessage);
                alert("Error: " + errorMessage);
            });
            
            privateMessageConnection.start().then(() => {
                console.log("Private message connection established");
                // Join user's private channel
                privateMessageConnection.invoke("JoinPrivateChannel", currentUsername);
            }).catch(err => {
                console.error("Error starting SignalR connection:", err.toString());
            });
        }
        
        // Toggle the messaging panel visibility
        function toggleMessagingPanel() {
            const panel = document.getElementById('messaging-panel');
            if (panel.classList.contains('d-none')) {
                panel.classList.remove('d-none');
                // Reset unread counter when opening
                resetUnreadCounter();
            } else {
                panel.classList.add('d-none');
            }
        }
        
        // Close the messaging panel
        function closeMessagingPanel() {
            document.getElementById('messaging-panel').classList.add('d-none');
        }
        
        // Load all conversations for the current user
        function loadConversations() {
            fetch(`/Messages?handler=Conversations`, {
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                const conversationList = document.querySelector('.conversation-list');
                const noConversationsMessage = document.getElementById('no-conversations-message');
                
                // Clear previous content except the no conversations message
                Array.from(conversationList.children).forEach(child => {
                    if (child !== noConversationsMessage) {
                        child.remove();
                    }
                });
                
                // Reset total unread count
                totalUnreadMessages = 0;
                
                if (data.length === 0) {
                    noConversationsMessage.classList.remove('d-none');
                } else {
                    noConversationsMessage.classList.add('d-none');
                    
                    // Add each conversation to the list
                    data.forEach(conversation => {
                        const conversationItem = document.createElement('a');
                        conversationItem.href = 'javascript:void(0)';
                        conversationItem.className = 'list-group-item list-group-item-action conversation-item';
                        conversationItem.setAttribute('data-conversation-id', conversation.conversationId);
                        conversationItem.setAttribute('data-username', conversation.otherUsername);
                        
                        // Update total unread count
                        totalUnreadMessages += conversation.unreadCount;
                        
                        conversationItem.innerHTML = `
                            <img src="${conversation.otherUserProfilePic}" class="conversation-avatar">
                            <div class="conversation-info">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="conversation-name">${conversation.otherUsername}</div>
                                    <small class="conversation-time">${conversation.lastMessageTime}</small>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="conversation-preview">${conversation.lastMessageContent}</div>
                                    ${conversation.unreadCount > 0 ? `<span class="badge bg-primary rounded-pill">${conversation.unreadCount}</span>` : ''}
                                </div>
                            </div>
                        `;
                        
                        conversationItem.addEventListener('click', () => {
                            openConversation(conversation.conversationId, conversation.otherUsername, conversation.otherUserProfilePic);
                        });
                        
                        conversationList.appendChild(conversationItem);
                    });
                    
                    // Update unread counter in the UI
                    updateUnreadBadge();
                }
            })
            .catch(error => {
                console.error('Error loading conversations:', error);
            });
        }
        
        // Open a specific conversation
            function openConversation(conversationId, username, profilePic) {
                activeConversationId = conversationId;
                activeRecipientUsername = username;

                // Get online status
                const isOnline = Array.from(document.querySelectorAll('#onlineUsersList .dropdown-item'))
                    .some(item => item.textContent.includes(username));

                // Update UI
                document.getElementById('conversation-username').innerHTML = `
                    <a href="/PublicProfile/${username}" class="text-decoration-none text-dark">
                        ${username}
                    </a>
                    <span class="online-indicator ${isOnline ? 'online' : 'offline'} ms-1"></span>
                `;
                document.getElementById('conversation-user-pic').src = profilePic;

                // Add options menu
                const header = document.querySelector('.conversation-header');
                if (!header.querySelector('.conversation-options')) {
                    const optionsButton = document.createElement('button');
                    optionsButton.className = 'btn btn-sm btn-light conversation-options';
                    optionsButton.innerHTML = '<i class="bi bi-three-dots-vertical"></i>';
                    optionsButton.addEventListener('click', toggleConversationOptions);

                    const optionsMenu = document.createElement('div');
                    optionsMenu.className = 'conversation-options-menu dropdown-menu dropdown-menu-end d-none';
                    optionsMenu.innerHTML = `
                        <a href="/PublicProfile/${username}" class="dropdown-item">View Profile</a>
                        <div class="dropdown-divider"></div>
                        <button class="dropdown-item text-danger delete-conversation">Delete Conversation</button>
                    `;

                    header.appendChild(optionsButton);
                    header.appendChild(optionsMenu);
                }

                // Switch views
                document.getElementById('conversations-view').classList.add('d-none');
                document.getElementById('conversation-view').classList.remove('d-none');
                document.getElementById('new-message-view').classList.add('d-none');

                // Load messages
                loadMessages(conversationId);
            }

            function toggleConversationOptions(event) {
                const menu = document.querySelector('.conversation-options-menu');
                menu.classList.toggle('d-none');
                event.stopPropagation();

                // Close when clicking outside
                document.addEventListener('click', function closeMenu(e) {
                    if (!e.target.closest('.conversation-options-menu')) {
                        menu.classList.add('d-none');
                        document.removeEventListener('click', closeMenu);
                    }
                });
            }
        
        // Load messages for a specific conversation
        function loadMessages(conversationId) {
            fetch(`/Messages?handler=Messages&conversationId=${conversationId}`, {
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                const messagesContainer = document.getElementById('messages-container');
                messagesContainer.innerHTML = '';
                
                // Add each message to the container
                data.messages.forEach(message => {
                    appendMessage(message);
                });
                
                // Scroll to bottom
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Refresh conversations (to update unread counts)
                loadConversations();
            })
            .catch(error => {
                console.error('Error loading messages:', error);
            });
        }
        
        // Append a message to the messages container
                    function appendMessage(message) {
                const messagesContainer = document.getElementById('messages-container');
                const messageElement = document.createElement('div');

                // Determine message class based on sender
                const messageClass = message.isSentByCurrentUser ? 'message-sent' : 'message-received';
                messageElement.className = `message-bubble ${messageClass} position-relative`;
                messageElement.dataset.messageId = message.id;

                // Set message content
                messageElement.innerHTML = `
                    <div class="message-content">${message.content}</div>
                    <div class="message-time">${message.time}</div>
                    ${message.isSentByCurrentUser ? `
                    <div class="message-read-status" data-message-id="${message.id}">
                        ${message.isRead ? '<i class="bi bi-check2-all"></i>' : '<i class="bi bi-check2"></i>'}
                    </div>` : ''}
                `;

                // Add message actions button
                const actionsBtn = document.createElement('button');
                actionsBtn.className = 'btn btn-sm message-actions-btn';
                actionsBtn.innerHTML = '<i class="bi bi-three-dots-vertical"></i>';
                actionsBtn.addEventListener('click', function(e) {
                    toggleMessageActions(message.id, e);
                });

                messageElement.appendChild(actionsBtn);

                // Create actions menu (initially hidden)
                const actionsMenu = document.createElement('div');
                actionsMenu.className = 'message-actions-menu d-none';
                actionsMenu.dataset.messageId = message.id;

                // Different options based on whether current user sent the message
                let menuItems = '';
                if (message.isSentByCurrentUser) {
                    menuItems = `
                        <button class="action-item edit-message">Edit</button>
                        <button class="action-item delete-message">Delete</button>
                    `;
                } else {
                    menuItems = `
                        <button class="action-item reply-message">Reply</button>
                        <button class="action-item like-message">${message.isLiked ? 'Unlike' : 'Like'}</button>
                    `;
                }

                actionsMenu.innerHTML = menuItems;
                messageElement.appendChild(actionsMenu);

                messagesContainer.appendChild(messageElement);

                // Scroll to bottom
                messagesContainer.scrollTop = messagesContainer.scrollHeight;

                // Add event listeners for actions
                addMessageActionListeners(message.id);
            }

            function toggleMessageActions(messageId, event) {
                // Hide all other menus first
                document.querySelectorAll('.message-actions-menu:not(.d-none)').forEach(menu => {
                    menu.classList.add('d-none');
                });

                const menu = document.querySelector(`.message-actions-menu[data-message-id="${messageId}"]`);
                menu.classList.toggle('d-none');
                event.stopPropagation();

                // Close when clicking outside
                document.addEventListener('click', function closeMenu(e) {
                    if (!e.target.closest('.message-actions-menu')) {
                        menu.classList.add('d-none');
                        document.removeEventListener('click', closeMenu);
                    }
                });
            }

            function addMessageActionListeners(messageId) {
                // Edit message
                const editBtn = document.querySelector(`.message-actions-menu[data-message-id="${messageId}"] .edit-message`);
                if (editBtn) {
                    editBtn.addEventListener('click', () => {
                        // Get message content
                        const message = document.querySelector(`.message-bubble[data-message-id="${messageId}"]`);
                        const content = message.querySelector('.message-content').textContent;

                        // Replace with input field
                        message.querySelector('.message-content').style.display = 'none';

                        const editField = document.createElement('div');
                        editField.className = 'edit-message-field';
                        editField.innerHTML = `
                            <input type="text" class="form-control form-control-sm mb-1" value="${content}">
                            <div class="d-flex justify-content-end">
                                <button class="btn btn-sm btn-primary me-1 save-edit">Save</button>
                                <button class="btn btn-sm btn-secondary cancel-edit">Cancel</button>
                            </div>
                        `;

                        message.insertBefore(editField, message.querySelector('.message-time'));

                        // Focus the input
                        editField.querySelector('input').focus();

                        // Add save/cancel handlers
                        editField.querySelector('.save-edit').addEventListener('click', () => {
                            const newContent = editField.querySelector('input').value.trim();
                            if (newContent) {
                                // Call hub method to edit message
                                privateMessageConnection.invoke("EditPrivateMessage", parseInt(messageId), currentUsername, newContent)
                                    .catch(err => console.error("Error editing message:", err.toString()));

                                // Update UI optimistically
                                message.querySelector('.message-content').textContent = newContent;
                                message.querySelector('.message-content').style.display = '';
                                editField.remove();
                            }
                        });

                        editField.querySelector('.cancel-edit').addEventListener('click', () => {
                            message.querySelector('.message-content').style.display = '';
                            editField.remove();
                        });
                    });
                }

                // Delete message
                const deleteBtn = document.querySelector(`.message-actions-menu[data-message-id="${messageId}"] .delete-message`);
                if (deleteBtn) {
                    deleteBtn.addEventListener('click', () => {
                        if (confirm('Are you sure you want to delete this message?')) {
                            // Call hub method to delete message
                            privateMessageConnection.invoke("DeletePrivateMessage", parseInt(messageId), currentUsername)
                                .catch(err => console.error("Error deleting message:", err.toString()));

                            // Remove message from UI optimistically
                            const message = document.querySelector(`.message-bubble[data-message-id="${messageId}"]`);
                            message.style.opacity = '0';
                            setTimeout(() => message.remove(), 300);
                        }
                    });
                }

                // Like message
                const likeBtn = document.querySelector(`.message-actions-menu[data-message-id="${messageId}"] .like-message`);
                if (likeBtn) {
                    likeBtn.addEventListener('click', () => {
                        const isLiked = likeBtn.textContent === 'Unlike';

                        // Call hub method to like/unlike message
                        privateMessageConnection.invoke(isLiked ? "UnlikePrivateMessage" : "LikePrivateMessage", parseInt(messageId), currentUsername)
                            .catch(err => console.error("Error liking message:", err.toString()));

                        // Update UI optimistically
                        likeBtn.textContent = isLiked ? 'Like' : 'Unlike';
                    });
                }

                // Reply to message
                const replyBtn = document.querySelector(`.message-actions-menu[data-message-id="${messageId}"] .reply-message`);
                if (replyBtn) {
                    replyBtn.addEventListener('click', () => {
                        // Get message content
                        const message = document.querySelector(`.message-bubble[data-message-id="${messageId}"]`);
                        const content = message.querySelector('.message-content').textContent;

                        // Show reply UI
                        const replyContainer = document.createElement('div');
                        replyContainer.className = 'reply-container bg-light p-2 mb-2 rounded';
                        replyContainer.innerHTML = `
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="fw-bold"><i class="bi bi-reply"></i> Replying to a message</span>
                                    <p class="mb-0 text-muted small text-truncate">${content}</p>
                                </div>
                                <button class="btn btn-sm text-muted cancel-reply">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        `;

                        const inputContainer = document.querySelector('.message-input-container');
                        inputContainer.insertBefore(replyContainer, inputContainer.firstChild);

                        // Store the message ID for reply
                        document.getElementById('message-input').dataset.replyToId = messageId;

                        // Focus the input
                        document.getElementById('message-input').focus();

                        // Add cancel handler
                        replyContainer.querySelector('.cancel-reply').addEventListener('click', () => {
                            replyContainer.remove();
                            delete document.getElementById('message-input').dataset.replyToId;
                        });
                    });
                }
            }
        
        // Send a message in the active conversation
        function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();
            const replyToId = messageInput.dataset.replyToId;
            
            if (!activeConversationId || !activeRecipientUsername || !message) {
                return;
            }
            
            // Send via SignalR
                    privateMessageConnection.invoke(
                replyToId ? "SendPrivateMessageReply" : "SendPrivateMessage",
                currentUsername,
                activeRecipientUsername,
                message,
                replyToId ? parseInt(replyToId) : null
            )
            .catch(err => {
                console.error('Error sending message:', err.toString());
                alert('Error sending message. Please try again.');
            });

            messageInput.value = '';
            const replyContainer = document.querySelector('.reply-container');
            if (replyContainer) {
                replyContainer.remove();
            }
            delete messageInput.dataset.replyToId;
        }
        
        // Show the conversations list view
        function showConversationsList() {
            document.getElementById('conversations-view').classList.remove('d-none');
            document.getElementById('conversation-view').classList.add('d-none');
            document.getElementById('new-message-view').classList.add('d-none');
            
            // Reset active conversation
            activeConversationId = null;
            activeRecipientUsername = null;
        }
        
        // Show the new message view
        function showNewMessageView() {
            document.getElementById('conversations-view').classList.add('d-none');
            document.getElementById('conversation-view').classList.add('d-none');
            document.getElementById('new-message-view').classList.remove('d-none');
            
            // Clear input fields
            document.getElementById('recipient-username').value = '';
            document.getElementById('new-message-content').value = '';
            document.getElementById('username-suggestions').classList.add('d-none');
        }

            function searchUsers() {
                const searchInput = document.getElementById('recipient-username');
                const searchTerm = searchInput.value.trim();
                const suggestionsContainer = document.getElementById('username-suggestions');

                if (searchTerm.length < 1) {
                    suggestionsContainer.classList.add('d-none');
                    return;
                }

                // Get the CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch(`/Messages?handler=SearchUsers&searchTerm=${encodeURIComponent(searchTerm)}`, {
                    headers: {
                        'RequestVerificationToken': token
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Search failed: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    suggestionsContainer.innerHTML = '';

                    if (data.length === 0) {
                        const noResultsItem = document.createElement('div');
                        noResultsItem.className = 'list-group-item text-muted';
                        noResultsItem.textContent = 'No users found';
                        suggestionsContainer.appendChild(noResultsItem);
                    } else {
                        // Add each user to suggestions
                        data.forEach(user => {
                            const suggestionItem = document.createElement('a');
                            suggestionItem.href = 'javascript:void(0)';
                            suggestionItem.className = 'list-group-item list-group-item-action';

                            // Get online status from the online users list
                            const isOnline = Array.from(document.querySelectorAll('#onlineUsersList .dropdown-item'))
                                .some(item => item.textContent.includes(user.username));

                            suggestionItem.innerHTML = `
                                <div class="d-flex align-items-center">
                                    <img src="${user.profilePic}" class="rounded-circle me-2" style="width: 30px; height: 30px;">
                                    <span>${user.username}</span>
                                    <span class="online-indicator ${isOnline ? 'online' : 'offline'} ms-auto"></span>
                                </div>
                            `;

                            suggestionItem.addEventListener('click', () => {
                                document.getElementById('recipient-username').value = user.username;
                                suggestionsContainer.classList.add('d-none');
                            });

                            suggestionsContainer.appendChild(suggestionItem);
                        });
                    }

                    suggestionsContainer.classList.remove('d-none');
                })
                .catch(error => {
                    console.error('Error searching users:', error);
                });
            }

            // Send a new message to a user
            function sendNewMessage() {
                const recipientUsername = document.getElementById('recipient-username').value.trim();
                const messageContent = document.getElementById('new-message-content').value.trim();

                if (!recipientUsername || !messageContent) {
                    alert('Please enter a recipient and message.');
                    return;
                }
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                // Create a conversation if one doesn't exist
                fetch('/Messages?handler=StartConversation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ otherUsername: recipientUsername })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }

                    // Send the message
                    privateMessageConnection.invoke("SendPrivateMessage", currentUsername, recipientUsername, messageContent)
                        .then(() => {
                            // Open the conversation
                            loadConversations();

                            // Give time for the conversation to load
                            setTimeout(() => {
                                const conversationItem = document.querySelector(`.conversation-item[data-username="${recipientUsername}"]`);
                                if (conversationItem) {
                                    const conversationId = conversationItem.getAttribute('data-conversation-id');
                                    const profilePic = conversationItem.querySelector('.conversation-avatar').src;
                                    openConversation(conversationId, recipientUsername, profilePic);
                                } else {
                                    // Fallback to conversations list
                                    showConversationsList();
                                }
                            }, 500);
                        })
                        .catch(err => {
                            console.error('Error sending message:', err.toString());
                            alert('Error sending message. Please try again.');
                        });
                })
                .catch(error => {
                    console.error('Error starting conversation:', error);
                    alert('Error: ' + error.message);
                });
            }

            // Update the unread messages badge
            function updateUnreadBadge() {
                const badge = document.getElementById('unread-badge');

                if (totalUnreadMessages > 0) {
                    badge.textContent = totalUnreadMessages > 99 ? '99+' : totalUnreadMessages;
                    badge.classList.remove('d-none');
                } else {
                    badge.classList.add('d-none');
                }
            }

            // Increment unread counter
            function incrementUnreadCounter() {
                totalUnreadMessages++;
                updateUnreadBadge();
            }

            // Reset unread counter
            function resetUnreadCounter() {
                totalUnreadMessages = 0;
                updateUnreadBadge();
            }

            // Request notification permission
            if ("Notification" in window) {
                Notification.requestPermission();
            }
        </script>
    }

</body>
</html>
